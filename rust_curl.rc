#![crate_type = "lib"]
#![comment="Rust Curl"]
#![author="Mark Edward Sinclair"]
#![license="MIT"]
#![crate_id="rust_curl#0.1"]
#![feature(globs)]
#![feature(link_args)]
#![allow(non_camel_case_types)]
#![allow(ctypes)]

extern crate libc;

pub mod headers;
pub mod request;
pub mod response;

#[path="curl/curl.rs"]
pub mod curl;

#[path="examples/examples.rs"]
pub mod examples;
pub mod http_client;



fn main() {
    use std::collections::hashmap::HashMap;
    use request::Request;
    use std::str::from_utf8;

    let client = http_client::HttpClient::new();

    let url = "http://api.4chan.org/pol/threads.json";
    let mut headers = HashMap::new();
    headers.insert(headers::request::ACCEPT.to_string(),"application/json".to_str());

    let req = Request::new(url.to_string(),headers,vec![]);

    let resp = match client.exec(&req) {
        Ok(response) => response,
        Err(msg) => fail!(msg),
    };

    for (k, v) in resp.headers.iter() {
        println!("{}: {}",*k,*v);
    }

    println!("{}", from_utf8(resp.body.as_slice()));
}
